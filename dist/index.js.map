{"version": 3,"file": "index.js","sources": ["../src/OtaManager.ts"],"sourcesContent": ["import * as Updates from \"expo-updates\";\nimport { Alert, AppState, AppStateStatus } from \"react-native\";\nimport { IOptions } from \"./IOptions\";\n\nexport const showConfirmAlert = async (\n  title: string,\n  message?: string,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\"\n) =>\n  new Promise<boolean>((resolve) => {\n    Alert.alert(\n      title,\n      message,\n      [\n        { text: confirmText, onPress: () => resolve(true) },\n  ],\n      { onDismiss: () => resolve(false) }\n    );\n  });\n\nexport default class OtaManager {\n  private lastPrompt: Date | null = null;\n  private lastAppState: AppStateStatus = \"background\";\n  private options: IOptions;\n\n  constructor(options: Partial<IOptions>) {\n    const hourInMS = 1000 * 60 * 60;\n\n    const defaultOptions: IOptions = {\n      noButtonText: \"Not now\",\n      yesButtonText: \"Restart\",\n      textLines: [\"An update is ready\", \"Restart your app to start using it\"],\n      titleText: \"New Version\",\n      repromptIntervalMs: hourInMS,\n      foregroundCheckIntervalMs: 0,\n    };\n\n    this.options = { ...defaultOptions, ...options };\n\n    AppState.addEventListener(\"change\", this.handleAppStateChange);\n\n    const { foregroundCheckIntervalMs } = this.options;\n    if (foregroundCheckIntervalMs > 0) {\n      setInterval(this.checkForNewAppVersion, foregroundCheckIntervalMs);\n    }\n  }\n\n  private handleNewBundle = async () => {\n    try {\n      if (\n        this.lastPrompt &&\n        new Date().getTime() - this.lastPrompt.getTime() <\n          this.options.repromptIntervalMs\n      ) {\n        return;\n      }\n\n      const restartConfirm = await showConfirmAlert(\n        this.options.titleText,\n        this.options.textLines.join(\"\\n\"),\n        this.options.yesButtonText);\n\n      this.lastPrompt = new Date();\n\n      if (restartConfirm) {\n        Updates.reloadAsync();\n      }\n    } catch (error) {\n      console.warn(\"expo-ota-updates: Error handling new bundle\", error);\n    }\n  };\n\n  private handleAppStateChange = (nextAppState: AppStateStatus) => {\n    if (this.lastAppState === \"background\" && nextAppState === \"active\") {\n      this.checkForNewAppVersion();\n    }\n    this.lastAppState = nextAppState;\n  };\n\n  private checkForNewAppVersion = async () => {\n    try {\n      const { isAvailable } = await Updates.checkForUpdateAsync();\n\n      if (isAvailable) {\n        const { isNew } = await Updates.fetchUpdateAsync();\n        if (isNew) {\n          this.handleNewBundle();\n        }\n      }\n    } catch (error) {\n      console.warn(\n        \"expo-ota-updates: Error checking for new app version\",\n        error\n      );\n    }\n  };\n}\n\nexport const initialiseOtaManager = (options: Partial<IOptions>) => {\n  new OtaManager(options);\n};\n"],"names": ["Alert","Updates.reloadAsync","Updates.checkForUpdateAsync","Updates.fetchUpdateAsync","AppState"],"mappings": "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"}
